
services:
  ui:
    build:
      context: ../
      dockerfile: ./run_time/Dockerfile-Node
    working_dir: /home/node/app
    environment:
        - NODE_ENV=development
    volumes:
        - ./ui:/home/node/app
    expose:
        - "3000"
    ports: # use if it is necessary to expose the container to the host machine
        - "3000:3000"
    command: "npm start"
  db:
    image: postgres:17-alpine
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    ports:
      - 5432:5432
    volumes:
      - ./pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_USER: postgres
      POSTGRES_DB: controller_connect
      PGDATA: /var/lib/postgresql/data/pgdata
      #POSTGRES_INITDB_ARGS
      #POSTGRES_INITDB_WALDIR
      #POSTGRES_HOST_AUTH_METHOD

  cron:
    build:
      context: ../
      dockerfile: ./run_time/Dockerfile-Cron
    working_dir: /app
    volumes:
       - ./db_sync/getControllerApplications.py:/app/getControllerApplications.py
       - ./db_sync/database.ini:/app/database.ini

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
